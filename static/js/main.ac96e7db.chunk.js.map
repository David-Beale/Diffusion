{"version":3,"sources":["Components/Main/useData.js","Components/Main/Main.js","Components/Rig/useRigMouseEvents.js","Components/Rig/Rig.js","App.js","index.js"],"names":["worker","Worker","scratchObject3D","Object3D","scratchColor","Color","color1","color2","color3","Main","length","outerRadius","meshes","useRef","Array","from","meshRef","createRef","colorRef","colorArray","Float32Array","currentMesh","bufferMeshRef","bufferColorRef","bufferColorArray","useMemo","bufferSize","index","bufferIndex","finished","useEffect","current","forEach","mesh","count","position","set","scale","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","toArray","postMessage","message","maxRange","updateBufferMesh","useCallback","pos","dist","x","y","z","lerpColors","Math","min","onmessage","e","data","result","maxDist","transferBufferData","bufferMatrixIndex","matrixIndex","bufferColorIndex","colorIndex","i","j","array","useFrame","useData","map","ref","args","frustumCulled","attachObject","attach","vertexColors","VertexColors","target","Vector3","Rig","mouse","prevTheta","prevPhi","PI","prevR","camera","useThree","theta","phi","r","max","newTheta","newPhi","rSpeed","newR","setFromSphericalCoords","lookAt","App","useState","clientX","window","innerWidth","clientY","innerHeight","deltaY","useRigMouseEvents","onMouseMove","onWheel","className","onPointerMove","fov","far","Stats","intensity","Sky","mieCoefficient","inclination","azimuth","rayleigh","distance","Stars","radius","factor","fade","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac96e7db.chunk.js","sourcesContent":["import { useFrame } from \"@react-three/fiber\";\r\nimport { createRef, useCallback, useEffect, useMemo, useRef } from \"react\";\r\nimport { Color, Object3D } from \"three\";\r\nconst worker = new Worker(\"./worker/worker.js\");\r\n\r\nconst scratchObject3D = new Object3D();\r\nconst scratchColor = new Color();\r\nconst color1 = new Color(\"red\");\r\nconst color2 = new Color(\"aqua\");\r\nconst color3 = new Color(\"green\");\r\n\r\nconst maxRange = 110;\r\nconst numMeshes = 5;\r\nconst bufferSize = 520;\r\n\r\nexport const useData = ({ length, outerRadius }) => {\r\n  const meshes = useRef(\r\n    Array.from({ length: numMeshes }, () => {\r\n      return {\r\n        meshRef: createRef(),\r\n        colorRef: createRef(),\r\n        colorArray: new Float32Array((length / numMeshes) * 3),\r\n      };\r\n    })\r\n  );\r\n  const currentMesh = useRef(0);\r\n  const bufferMeshRef = useRef();\r\n  const bufferColorRef = useRef();\r\n  const bufferColorArray = useMemo(() => new Float32Array(bufferSize * 3), []);\r\n  const index = useRef(1);\r\n  const bufferIndex = useRef(0);\r\n\r\n  const finished = useRef(false);\r\n  useEffect(() => {\r\n    meshes.current.forEach((mesh, index) => {\r\n      const { meshRef } = mesh;\r\n      meshRef.current.count = index === 0 ? 1 : 0;\r\n    });\r\n\r\n    scratchObject3D.position.set(0, 0, 0);\r\n    scratchObject3D.scale.set(1, 1, 1);\r\n    scratchObject3D.updateMatrix();\r\n    const { meshRef, colorRef, colorArray } =\r\n      meshes.current[currentMesh.current];\r\n    meshRef.current.setMatrixAt(0, scratchObject3D.matrix);\r\n    meshRef.current.instanceMatrix.needsUpdate = true;\r\n\r\n    scratchColor.set(\"red\");\r\n    scratchColor.toArray(colorArray, 0);\r\n    colorRef.current.needsUpdate = true;\r\n\r\n    worker.postMessage({ message: \"start\", maxRange });\r\n  }, [length]);\r\n\r\n  const updateBufferMesh = useCallback(\r\n    (pos, dist) => {\r\n      const { x, y, z } = pos;\r\n      scratchObject3D.position.set(x, y, z);\r\n      scratchObject3D.scale.set(1, 1, 1);\r\n      scratchObject3D.updateMatrix();\r\n      bufferMeshRef.current.setMatrixAt(\r\n        bufferIndex.current,\r\n        scratchObject3D.matrix\r\n      );\r\n\r\n      if (dist < 65) {\r\n        scratchColor.lerpColors(color1, color2, dist / 65);\r\n      } else {\r\n        dist = Math.min(dist, 100);\r\n        scratchColor.lerpColors(color2, color3, (dist - 65) / 35);\r\n      }\r\n      scratchColor.toArray(bufferColorArray, bufferIndex.current * 3);\r\n      bufferIndex.current++;\r\n    },\r\n    [bufferColorArray]\r\n  );\r\n\r\n  useEffect(() => {\r\n    worker.onmessage = (e) => {\r\n      const results = e.data;\r\n      results.forEach((result) => {\r\n        const { pos, dist, maxDist } = result;\r\n        outerRadius.current = maxDist;\r\n        updateBufferMesh(pos, dist);\r\n      });\r\n      bufferColorRef.current.needsUpdate = true;\r\n      bufferMeshRef.current.instanceMatrix.needsUpdate = true;\r\n      bufferMeshRef.current.count = bufferIndex.current;\r\n    };\r\n    return () => {\r\n      worker.postMessage({ message: \"finished\" });\r\n    };\r\n  }, [outerRadius, updateBufferMesh]);\r\n\r\n  const transferBufferData = useCallback(() => {\r\n    let bufferMatrixIndex = 0;\r\n    let matrixIndex = index.current * 16;\r\n    let bufferColorIndex = 0;\r\n    let colorIndex = index.current * 3;\r\n\r\n    for (let i = 0; i < bufferIndex.current; i++) {\r\n      const { meshRef, colorRef, colorArray } =\r\n        meshes.current[currentMesh.current];\r\n      for (let j = 0; j < 16; j++) {\r\n        meshRef.current.instanceMatrix.array[matrixIndex] =\r\n          bufferMeshRef.current.instanceMatrix.array[bufferMatrixIndex];\r\n        bufferMatrixIndex++;\r\n        matrixIndex++;\r\n      }\r\n\r\n      for (let i = 0; i < 3; i++) {\r\n        colorArray[colorIndex] = bufferColorArray[bufferColorIndex];\r\n        bufferColorIndex++;\r\n        colorIndex++;\r\n      }\r\n\r\n      index.current++;\r\n\r\n      if (index.current === length / numMeshes) {\r\n        currentMesh.current++;\r\n        colorRef.current.needsUpdate = true;\r\n        meshRef.current.instanceMatrix.needsUpdate = true;\r\n        meshRef.current.count = index.current;\r\n        index.current = 0;\r\n        matrixIndex = 0;\r\n        colorIndex = 0;\r\n        if (currentMesh.current === numMeshes) {\r\n          finished.current = true;\r\n          worker.postMessage({ message: \"finished\" });\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    const { meshRef, colorRef } = meshes.current[currentMesh.current];\r\n\r\n    colorRef.current.needsUpdate = true;\r\n    meshRef.current.instanceMatrix.needsUpdate = true;\r\n    meshRef.current.count = index.current;\r\n    bufferIndex.current = 0;\r\n  }, [bufferColorArray, length]);\r\n\r\n  useFrame(() => {\r\n    if (finished.current) return;\r\n    if (bufferIndex.current >= bufferSize - 20) transferBufferData();\r\n    worker.postMessage({ message: \"ping\" });\r\n  });\r\n\r\n  return [meshes, bufferMeshRef, bufferColorRef, bufferColorArray];\r\n};\r\n","import { VertexColors } from \"three\";\r\nimport { useData } from \"./useData\";\r\n\r\nconst bufferSize = 520;\r\nexport default function Main({ length, outerRadius }) {\r\n  const [meshes, bufferMeshRef, bufferColorRef, bufferColorArray] = useData({\r\n    length,\r\n    outerRadius,\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {meshes.current.map(({ meshRef, colorRef, colorArray }, index) => (\r\n        <instancedMesh\r\n          ref={meshRef}\r\n          args={[null, null, length / meshes.current.length]}\r\n          frustumCulled={false}\r\n          key={index}\r\n        >\r\n          <sphereBufferGeometry args={[1, 16, 16]}>\r\n            <instancedBufferAttribute\r\n              ref={colorRef}\r\n              attachObject={[\"attributes\", \"color\"]}\r\n              args={[colorArray, 3]}\r\n            />\r\n          </sphereBufferGeometry>\r\n\r\n          <meshStandardMaterial attach=\"material\" vertexColors={VertexColors} />\r\n        </instancedMesh>\r\n      ))}\r\n      <instancedMesh\r\n        ref={bufferMeshRef}\r\n        args={[null, null, bufferSize]}\r\n        frustumCulled={false}\r\n      >\r\n        <sphereBufferGeometry args={[1, 16, 16]}>\r\n          <instancedBufferAttribute\r\n            ref={bufferColorRef}\r\n            attachObject={[\"attributes\", \"color\"]}\r\n            args={[bufferColorArray, 3]}\r\n          />\r\n        </sphereBufferGeometry>\r\n\r\n        <meshStandardMaterial attach=\"material\" vertexColors={VertexColors} />\r\n      </instancedMesh>\r\n    </>\r\n  );\r\n}\r\n","import { useRef } from \"react\";\r\n\r\nexport const useRigMouseEvents = (outerRadius) => {\r\n  const mouse = useRef([0, 0.5, null]);\r\n\r\n  const onMouseMove = (e) => {\r\n    mouse.current[0] = e.clientX / window.innerWidth - 0.5;\r\n    mouse.current[1] = e.clientY / window.innerHeight;\r\n  };\r\n\r\n  const onWheel = (e) => {\r\n    if (!mouse.current[2])\r\n      mouse.current[2] = Math.max(outerRadius.current * 4, 100);\r\n    if (e.deltaY < 0) {\r\n      if (mouse.current[2] < 50) return;\r\n      mouse.current[2] *= 0.8;\r\n    } else {\r\n      if (mouse.current[2] > 1000) return;\r\n      mouse.current[2] *= 1.25;\r\n    }\r\n  };\r\n\r\n  return [mouse, onMouseMove, onWheel];\r\n};\r\n","import { useFrame, useThree } from \"@react-three/fiber\";\r\nimport { useRef } from \"react\";\r\nimport { Vector3 } from \"three\";\r\n\r\nconst target = new Vector3();\r\n\r\nconst speed = 0.005;\r\nexport default function Rig({ mouse, outerRadius }) {\r\n  const prevTheta = useRef(0);\r\n  const prevPhi = useRef(0.5 * Math.PI);\r\n  const prevR = useRef(100);\r\n  const { camera } = useThree();\r\n  useFrame(() => {\r\n    const theta = mouse.current[0] * 2 * Math.PI;\r\n    const phi = mouse.current[1] * Math.PI;\r\n    const r = mouse.current[2] || Math.max(outerRadius.current * 4, 100);\r\n    const newTheta = prevTheta.current + speed * (theta - prevTheta.current);\r\n    const newPhi = prevPhi.current + speed * (phi - prevPhi.current);\r\n    const rSpeed = mouse.current[2] ? 0.1 : 0.001;\r\n    const newR = prevR.current + rSpeed * (r - prevR.current);\r\n    target.setFromSphericalCoords(newR, newPhi, newTheta);\r\n    camera.position.x = target.x;\r\n    camera.position.y = target.y;\r\n    camera.position.z = target.z;\r\n    camera.lookAt(0, 0, 0);\r\n    prevTheta.current = newTheta;\r\n    prevPhi.current = newPhi;\r\n    prevR.current = newR;\r\n  });\r\n  return null;\r\n}\r\n","import \"./App.css\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { Stats, OrbitControls, Sky, Stars } from \"@react-three/drei\";\nimport Main from \"./Components/Main/Main\";\nimport { useState } from \"react\";\nimport { useRigMouseEvents } from \"./Components/Rig/useRigMouseEvents\";\nimport Rig from \"./Components/Rig/Rig\";\nimport { useRef } from \"react/cjs/react.development\";\n\nexport default function App() {\n  const [length, setLength] = useState(50000);\n  const outerRadius = useRef(4);\n\n  const [mouse, onMouseMove, onWheel] = useRigMouseEvents(outerRadius);\n  return (\n    <div className=\"container\" onPointerMove={onMouseMove} onWheel={onWheel}>\n      <Canvas\n        camera={{\n          position: [0, 0, 100],\n          fov: 40,\n          far: 100000,\n        }}\n      >\n        <Stats className=\"stats\" />\n        <ambientLight intensity={0.5} />\n        <directionalLight intensity={1} position={[-20, 20, 0]} />\n        <directionalLight intensity={0.5} position={[20, 20, 0]} />\n        <Main length={length} outerRadius={outerRadius} />\n        <Rig mouse={mouse} outerRadius={outerRadius} />\n        {/* <OrbitControls /> */}\n        <Sky\n          position={[0, 1, 0]}\n          mieCoefficient={0.001}\n          inclination={1}\n          azimuth={0}\n          rayleigh={0.01}\n          distance={10000}\n        />\n        <Stars radius={10000} count={1000} factor={500} fade />\n      </Canvas>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}